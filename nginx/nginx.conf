server {
    listen 80;

    server_name localhost;

    # Redirect all HTTP requests to HTTPS
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl http2;

    server_name localhost;

    ssl_certificate     /etc/nginx/certs/server.crt;
    ssl_certificate_key /etc/nginx/certs/server.key;
    # Serve favicon.ico
    location = /favicon.ico {
       rewrite ^ /favicon.svg;
    }

    # Proxy all other API requests to Node.js
    location /api {
        rewrite ^/api(/.*)$ $1 break;  # Strip `/api` prefix from the URL

        proxy_pass http://app:3000;  # 'app' is the service name in docker-compose
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';

        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Handle /api/docs to proxy Swagger UI (with basic authentication)
    location /api/docs {
        rewrite ^/api(/.*)$ $1 break;  # Strip `/api` prefix from the URL

        proxy_pass http://app:3000;  # 'app' is the service name in docker-compose
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Enable basic authentication for API documentation
        auth_basic "Restricted API Documentation";
        auth_basic_user_file /etc/nginx/.htpasswd;

        # Proxy WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    # Handle /docs/static for serving Swagger UI static files
    location /docs/static/ {
        proxy_pass http://app:3000;  # 'app' is the service name in docker-compose
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Enable caching for static files (cache for 7 days)
        expires 7d;
        add_header Cache-Control "public";

        # Enable basic authentication for accessing static files
        auth_basic "Restricted Content";
        auth_basic_user_file /etc/nginx/.htpasswd;

        # Caching in the browser but still proxying static files to Fastify
        proxy_cache_valid 200 7d;
        proxy_cache_bypass $http_cache_control;
        proxy_no_cache $http_pragma $http_authorization;
    }


    # Custom error page for 404
    error_page 404 /404.html;

    location = /404.html {
        root /usr/share/nginx/html;  # Nginx default html directory
        internal;  # Prevent external access to the error page
    }

    location /static/ {
        root /usr/share/nginx/static;

        try_files $uri $uri/ =404;
    }

    # Serve static HTML for the root `/` request
    location / {
        root /usr/share/nginx/html;  # The directory containing the static files
        index index.html;            # The static HTML file to serve
    }
}