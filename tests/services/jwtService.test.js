const assert = require('node:assert');
const { describe, it } = require('node:test');
const { jwtService } = require('../../src/domain/services/jwt.service');

// –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ JWT
const payload = { userId: '1', sessionId: 'session123' };

describe('JwtService', () => {
  it('üîê –ü–æ–≤–∏–Ω–µ–Ω —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –≤–∞–ª—ñ–¥–Ω–∏–π access —Ç–æ–∫–µ–Ω —ñ –∫–æ—Ä–µ–∫—Ç–Ω–æ –π–æ–≥–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏', () => {
    const token = jwtService.generateAccessToken(payload); // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–æ–∫–µ–Ω–∞
    const decoded = jwtService.verifyAccessToken(token); // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ userId —É —Ç–æ–∫–µ–Ω—ñ –∑–±—ñ–≥–∞—î—Ç—å—Å—è –∑ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
    assert.strictEqual(
      // @ts-ignore - userId —ñ—Å–Ω—É—î —É –¥–µ–∫–æ–¥–æ–≤–∞–Ω–æ–º—É —Ç–æ–∫–µ–Ω—ñ
      decoded.userId,
      payload.userId,
      'userId —É –¥–µ–∫–æ–¥–æ–≤–∞–Ω–æ–º—É —Ç–æ–∫–µ–Ω—ñ –ø–æ–≤–∏–Ω–µ–Ω –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –ø–µ—Ä–µ–¥–∞–Ω–∏–º –¥–∞–Ω–∏–º'
    );
  });

  it('üîÑ –ü–æ–≤–∏–Ω–µ–Ω —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –≤–∞–ª—ñ–¥–Ω–∏–π refresh —Ç–æ–∫–µ–Ω —ñ –∫–æ—Ä–µ–∫—Ç–Ω–æ –π–æ–≥–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏', () => {
    const token = jwtService.generateRefreshToken(payload); // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ—Ñ—Ä–µ—à-—Ç–æ–∫–µ–Ω–∞
    const decoded = jwtService.verifyRefreshToken(token); // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ userId —É —Ç–æ–∫–µ–Ω—ñ –∑–±—ñ–≥–∞—î—Ç—å—Å—è –∑ –æ—á—ñ–∫—É–≤–∞–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
    assert.strictEqual(
      // @ts-ignore - userId —î –≤–∞–ª—ñ–¥–Ω–æ—é –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—é
      decoded.userId,
      payload.userId,
      'userId —É –¥–µ–∫–æ–¥–æ–≤–∞–Ω–æ–º—É —Ç–æ–∫–µ–Ω—ñ –ø–æ–≤–∏–Ω–µ–Ω –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –ø–µ—Ä–µ–¥–∞–Ω–∏–º –¥–∞–Ω–∏–º'
    );
  });

  it('üö´ –ü–æ–≤–∏–Ω–µ–Ω –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ null –¥–ª—è –Ω–µ–≤–∞–ª—ñ–¥–Ω–æ–≥–æ access —Ç–æ–∫–µ–Ω–∞', () => {
    const decoded = jwtService.verifyAccessToken('invalidToken'); // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–≤–∞–ª—ñ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —î null
    assert.strictEqual(decoded, null, '–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ç–æ–∫–µ–Ω –ø–æ–≤–∏–Ω–µ–Ω –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ null');
  });

  it('üö´ –ü–æ–≤–∏–Ω–µ–Ω –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ null –¥–ª—è –Ω–µ–≤–∞–ª—ñ–¥–Ω–æ–≥–æ refresh —Ç–æ–∫–µ–Ω–∞', () => {
    const decoded = jwtService.verifyRefreshToken('invalidToken'); // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–≤–∞–ª—ñ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —î null
    assert.strictEqual(decoded, null, '–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ç–æ–∫–µ–Ω –ø–æ–≤–∏–Ω–µ–Ω –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ null');
  });
});
