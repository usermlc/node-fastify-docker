upstream backend {
    server app:3000; # Use the service name and port from Docker Compose
    keepalive 64;  # Reuse up to 64 connections to reduce connection overhead
}

server {
    listen 80;
    server_name localhost;

    # Redirect all HTTP requests to HTTPS
    return 301 https://$host$request_uri;
}

server {
    proxy_buffer_size 128k;
    proxy_buffers 4 256k;
    proxy_busy_buffers_size 256k;

    listen 443 ssl http2; # Listen on port 443 for HTTPS and enable HTTP/2

    server_name localhost;

    ssl_certificate     /etc/nginx/certs/server.crt; # Path to the SSL certificate
    ssl_certificate_key /etc/nginx/certs/server.key; # Path to the SSL certificate key

    # Serve favicon.ico
    location = /favicon.ico {
       rewrite ^ /favicon.svg; # Rewrite favicon requests to favicon.svg
    }

    # Proxy all other API requests to Node.js
    location /api {
        rewrite ^/api(/.*)$ $1 break;  # Strip `/api` prefix from the URL

        proxy_pass http://backend/;  # Forward requests to the backend defined in upstream
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection ''; # Use HTTP/1.1 to keep connection alive

        proxy_connect_timeout 30s; # Timeout for establishing a connection
        proxy_read_timeout 30s;    # Timeout for reading from the proxied server

        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Handle /api/docs to proxy Swagger UI (with basic authentication)
    location /api/docs {
        rewrite ^/api(/.*)$ $1 break;  # Strip `/api` prefix from the URL

        proxy_pass http://backend/;  # Forward requests to the backend defined in upstream
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Enable basic authentication for API documentation
        auth_basic "Restricted API Documentation"; # Prompt for basic authentication
        auth_basic_user_file /etc/nginx/.htpasswd; # Path to the htpasswd file

        # Proxy WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    # Handle /docs/static for serving Swagger UI static files
    location /docs/static/ {
        proxy_pass http://backend/;  # Forward requests to the backend defined in upstream
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Enable caching for static files (cache for 7 days)
        expires 7d; # Set cache expiration to 7 days
        add_header Cache-Control "public";

        # Enable basic authentication for accessing static files
        auth_basic "Restricted Content"; # Prompt for basic authentication
        auth_basic_user_file /etc/nginx/.htpasswd; # Path to the htpasswd file

        # Caching in the browser but still proxying static files to Fastify
        proxy_cache_valid 200 7d; # Cache valid responses for 7 days
        proxy_cache_bypass $http_cache_control; # Bypass cache control headers
        proxy_no_cache $http_pragma $http_authorization; # Do not cache responses with certain headers
    }

    # Custom error page for 404
    error_page 404 /404.html;

    location = /404.html {
        root /usr/share/nginx/html;  # Nginx default HTML directory
        internal;  # Prevent external access to the error page
    }

    # Serve static files from /static/ directory
    location /static/ {
        root /usr/share/nginx/static; # Directory containing static files

        try_files $uri $uri/ =404; # Try to serve the requested file, if not found, return 404
    }

    # Serve static HTML for the root `/` request
    location / {
        root /usr/share/nginx/html;  # Directory containing static HTML files
        index index.html;            # The static HTML file to serve
    }
}
