services:
  app:
    build:
      context: . # Build context set to current directory
      dockerfile: ${DOCKERFILE:-Dockerfile} # Dockerfile path, defaults to 'Dockerfile'

    deploy:
      resources:
        limits:
          memory: 8G # Maximum memory allocation for the container
          cpus: '5.0' # Maximum CPU allocation for the container
        reservations:
          memory: 4G # Minimum memory allocation reserved for the container
          cpus: '4.0' # Minimum CPU allocation reserved for the container

    networks:
      - app-network # Connects the app container to the app-network
      - app-mongo-network # Connects the app container to the app-mongo-network
      - app-redis-network # Connects the app container to the app-redis-network
      - app-postgres-network # Connects the app container to the app-postgres-network
    ports:
      - ${DEV_APP_PORT:-} # Port mapping for debugger, value set by environment variable
    volumes:
      - .:/srv/node/app # Mount the current directory to the container's /srv/node/app directory
    environment: # Environment variables for the app container
      - NODE_ENV=${NODE_ENV:-development} # Application environment, defaults to 'development'
      - APP_HOST=${APP_HOST:-0.0.0.0} # Application host, defaults to '0.0.0.0'
      - APP_PORT=${APP_PORT:-3000} # Application port, defaults to 3000
      - PRISMA_SYNC_DB=${PRISMA_SYNC_DB:-} # Environment variable for Prisma database sync
      - PRISMA_REBUILD_CLIENT=${PRISMA_REBUILD_CLIENT:-} # Environment variable for Prisma client rebuild
      - APP_PG_DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${APP_PG_PORT:-5432}/${POSTGRES_DB}?schema=public # Postgres database URL
      - APP_MONGO_DATABASE_URL=mongodb://mongo:${APP_MONGO_PORT:-27017}/${MONGO_DB} # MongoDB database URL
    depends_on: # Dependencies for the app container
      - postgres
      - mongo
      - redis

  postgres:
    image: postgres:latest # Use the latest PostgreSQL image from Docker Hub
    networks:
      - app-postgres-network # Connects the postgres container to the app-postgres-network
    ports:
      - ${DEV_POSTGRES_PORT:-} # PostgreSQL port mapping, value set by environment variable
    volumes:
      - postgres-data:/var/lib/postgresql/data # Persistent volume for PostgreSQL data
    environment: # Environment variables for the postgres container
      - POSTGRES_DB=${POSTGRES_DB} # Name of the PostgreSQL database
      - POSTGRES_USER=${POSTGRES_USER} # PostgreSQL user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD} # PostgreSQL user password

  mongo:
    image: mongo:latest # Use the latest MongoDB image from Docker Hub
    networks:
      - app-mongo-network # Connects the mongo container to the app-mongo-network
    ports:
      - ${DEV_MONGO_PORT:-} # MongoDB port mapping, value set by environment variable
    volumes:
      - mongo-data:/data/db # Persistent volume for MongoDB data

  redis:
    image: redis:latest # Use the latest Redis image from Docker Hub
    ports:
      - ${DEV_REDIS_PORT:-} # Redis port mapping, value set by environment variable
    networks:
      - app-redis-network # Connects the redis container to the app-redis-network

  nginx:
    image: nginx:alpine # Use the Nginx image with Alpine Linux
    ports:
      - '80:80' # HTTP port
      - '443:443' # HTTPS port
    networks:
      - app-network # Connects the nginx container to the app-network
    volumes: # Mounts configuration and content directories to the nginx container
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro # Nginx configuration file, read-only
      - ./nginx/.htpasswd:/etc/nginx/.htpasswd:ro # Basic Auth credentials, read-only
      - ./nginx/certs:/etc/nginx/certs:ro # SSL certificates, read-only
      - ./static:/usr/share/nginx/static:ro # Static files, read-only
      - ./html:/usr/share/nginx/html:ro # HTML files, read-only
    depends_on: # Dependency for the nginx container
      - app

networks:
  app-network:
    driver: bridge # Use bridge network driver for the app-network

  app-mongo-network:
    driver: bridge # Use bridge network driver for the app-mongo-network

  app-postgres-network:
    driver: bridge # Use bridge network driver for the app-postgres-network

  app-redis-network:
    driver: bridge # Use bridge network driver for the app-redis-network

volumes:
  postgres-data: # Define volume for PostgreSQL data
  mongo-data: # Define volume for MongoDB data
