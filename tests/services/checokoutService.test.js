const assert = require('node:assert');
const { mock, describe, it } = require('node:test');
const {
  CheckoutService,
} = require('../../src/domain/services/checkout.service');
const { pricingService } = require('../../src/domain/services/pricing.service');

// –ú–æ–∫–∏ –¥–ª—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π CheckoutService
const mockUserRepository = {
  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ ID (—ñ–º—ñ—Ç—É—î—Ç—å—Å—è –∑–∞–ø–∏—Ç –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö)
  getById: async (id) => (id === '1' ? { id, username: 'testuser' } : null),
};

const mockCartRepository = {
  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—à–∏–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  getByUserId: async (userId) =>
    userId === '1'
      ? { items: [{ product: { id: '101', price: 50 }, quantity: 2 }] }
      : null,
  // –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—à–∏–∫–∞ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
  deleteByUserId: mock.fn(async (userId) => (userId === '1' ? true : null)),
};

const mockReceiptRepository = {
  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —á–µ–∫
  save: async (receipt) => receipt,
};

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è CheckoutService (—Ü–µ–π –±–ª–æ–∫ –∑–∞–ª–∏—à–∞—î–º–æ –±–µ–∑ –∑–º—ñ–Ω)
const checkoutService = new CheckoutService({
  // @ts-ignore - no need for full implementation
  cartRepository: mockCartRepository,
  // @ts-ignore - no need for full implementation
  receiptRepository: mockReceiptRepository,
  // @ts-ignore - no need for full implementation
  userRepository: mockUserRepository,
  pricingService,
});

// –¢–µ—Å—Ç–æ–≤–∏–π –Ω–∞–±—ñ—Ä –¥–ª—è CheckoutService
describe('CheckoutService', () => {
  it('üõí –ü–æ–≤–∏–Ω–µ–Ω —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —á–µ–∫ —Ç–∞ –æ—á–∏—â—É–≤–∞—Ç–∏ –∫–æ—à–∏–∫ –ø—ñ—Å–ª—è checkout', async () => {
    const userId = '1'; // –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const receipt = await checkoutService.checkout(userId); // –í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó checkout

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ —á–µ–∫ –º—ñ—Å—Ç–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π userId
    assert.strictEqual(
      receipt.userId,
      userId,
      '–ß–µ–∫ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —â–æ –æ—Ñ–æ—Ä–º–∏–≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'
    );

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ –º–µ—Ç–æ–¥ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—à–∏–∫–∞ –≤–∏–∫–ª–∏–∫–∞–Ω–∏–π –æ–¥–∏–Ω —Ä–∞–∑
    assert.strictEqual(
      mockCartRepository.deleteByUserId.mock.callCount(),
      1,
      '–ö–æ—à–∏–∫ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –æ—á–∏—â–µ–Ω–∏–π –ø—ñ—Å–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'
    );

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ —á–µ–∫ –º—ñ—Å—Ç–∏—Ç—å –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É
    assert.ok(receipt.totalAmount, '–ß–µ–∫ –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è');

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ —É —á–µ–∫—É –ø—Ä–∏—Å—É—Ç–Ω—ñ —Ç–æ–≤–∞—Ä–∏
    assert.ok(receipt.items.length > 0, '–ß–µ–∫ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤');
  });
});
